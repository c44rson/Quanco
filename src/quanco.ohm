Quanco {
  Program = (TopLevel | space)*

  TopLevel = ClassDef | FunctionDef

  ClassDef = "pitch" identifier ":" Block

  FunctionDef = "ruck" identifier "(" Params? ")" ReturnType? ":" Block

  Block = Statement+

  Params = Param ("," Param)*
  Param = identifier ":" Type ("=" Expr)?

  ReturnType = "->" Type

  Statement = VarDecl
            | Assignment
            | ForLoop
            | WhileLoop
            | IfStmt
            | ReturnStmt
            | ExprStmt

  VarDecl = identifier ":" Type ("=" Expr)?

  Assignment = LValue "=" Expr

  LValue = identifier ("." identifier)*

  ForLoop = "for" identifier "in" Expr ":" Block

  WhileLoop = "while" Expr ":" Block

  IfStmt = "if" Expr ":" Block
           ("elif" Expr ":" Block)*
           ("else" ":" Block)?

  ReturnStmt = "pass" Expr?

  ExprStmt = Expr

  Expr = OrExpr

  OrExpr = AndExpr ("or" AndExpr)*

  AndExpr = CompareExpr ("and" CompareExpr)*

  CompareExpr = AddExpr (CompareOp AddExpr)*

  AddExpr = MulExpr (AddOp MulExpr)*

  MulExpr = UnaryExpr (MulOp UnaryExpr)*

  UnaryExpr = PrefixOp? PostfixExpr

  PostfixExpr = PrimaryExpr (DotOp | CallOp)*

  DotOp = "." identifier
  CallOp = "(" ArgList? ")"

  PrimaryExpr = ParenExpr
              | ListLit
              | DictLit
              | identifier
              | number
              | string
              | BooleanLit
              | "None"

  ParenExpr = "(" Expr ")"

  BooleanLit = "True" | "False"

  ArgList = (NamedArg | Expr) ("," (NamedArg | Expr))*

  NamedArg = identifier "=" Expr

  ListLit = "[" ListItems? "]"
  ListItems = Expr ("," Expr)*

  DictLit = "{" DictItems? "}"
  DictItems = DictItem ("," DictItem)*
  DictItem = Expr ":" Expr

  Type = BasicType
       | ListType
       | DictType
       | UnionType
       | identifier

  BasicType = "str" | "int" | "float" | "bool"
  ListType = "list" "[" Type "]"
  DictType = "dict" "[" Type "," Type "]"
  UnionType = Type "|" Type

  CompareOp = "==" | "!=" | "<" | "<=" | ">" | ">="
  AddOp = "+" | "-"
  MulOp = "*" | "/"
  PrefixOp = "-" | "not"

  number = digit+ ("." digit+)?
  string = "\"" (~"\"" any)* "\""
         | "'" (~"'" any)* "'"
         | "f\"" (~"\"" any)* "\""
         | "f'" (~"'" any)* "'"

  identifier = letter (alnum | "_")*

  space += comment
  comment = "#" (~"\n" any)* "\n"
}