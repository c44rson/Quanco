Quanco {
  Program = (Statement | space)*

  Statement = ClassDecl
            | ConstructorDecl
            | FunctionDecl
            | ForLoop
            | WhileLoop
            | IfStmt
            | BreakStmt
            | ReturnStmt
            | VarDecl
            | Assignment
            | Exp
            
  Block = "{" Statement+ "}"
  
  ClassDecl = class identifier Block

  FunctionDecl = def ~__init__ identifier "(" Params? ")" "->" ReturnType Block
              
  ConstructorDecl = def __init__ "(" Params? ")" Block

  Params = Param ("," Param)*
  Param = ~self identifier ":" Type ("=" Exp)? -- regParam
        | self                                 -- self

  ReturnType = (Type | void)

  LValue = identifier ("." identifier)*

  ForLoop = for VarDecl "," Exp "," Exp Block

  WhileLoop = while Exp Block

  IfStmt = if Exp Block
           (elif Exp Block)*
           (else Block)?

  BreakStmt = break

  ReturnStmt = return Exp                                       --longReturn
             | return ~alnum                                    --shortReturn

  VarDecl = readonly? identifier ":" Type ("=" ~(unaryInc | unaryDec) Exp)?

  Assignment = LValue ("+=" | "-=" | "=") ~(unaryInc | unaryDec) Exp

  Exp   = Exp "or" Exp1					        --OrExpr
        | Exp1
  
  Exp1  = Exp1 "and" Exp2				        --AndExpr
  	  | Exp2
  
  Exp2  = Exp2 ("==" | "!=" | "<=" | "<" | ">=" | ">") Exp3   --CompareExpr
  	  | Exp3
  
  Exp3  = Exp3 ("+" | "-") Exp4				        --AddExpr
        | Exp4

  Exp4  = Exp4 ("*" | "/") Exp5				        --MulExpr
	  | Exp5
  
  Exp5  = (unaryInc | unaryDec | "not") Exp6  		      --PrefixExpr
  	  | Exp6
  
  Exp6  = Exp6 (PropertyOp | CallOp)*				--PostfixExpr
  	  | ParenExpr					       
        | string
        | identifier
        | number
        | BooleanLit
        | none

  PropertyOp = "." identifier
  CallOp = "(" ArgList? ")"

  ParenExpr = "(" Exp ")"

  string = "\"" (~"\"" any)* "\""
         | "'" (~"'" any)* "'"

  number = "-"? digit+ ("." digit+)? (("e" | "E") digit+)?

  BooleanLit = true | false

  ArgList = Exp ("," Exp)*

  Type = UnionType
       | BasicType
       | identifier

  BasicType = str | num | bool | none
  UnionType = Type "|" Type

  unaryInc = "++"
  unaryDec = "--"

  class = "class" ~alnum
  def = "def" ~alnum
  __init__ = "__init__" ~alnum
  self = "self" ~alnum
  this = "this" ~alnum
  true = "true" ~alnum
  false = "false" ~alnum
  str = "str" ~alnum
  num = "num" ~alnum
  bool = "bool" ~alnum
  none = "none" ~alnum
  return = "return" ~alnum
  for = "for" ~alnum
  in = "in" ~alnum
  while = "while" ~alnum
  if = "if" ~alnum
  elif = "elif" ~alnum
  else = "else" ~alnum
  void = "void" ~alnum
  break = "break" ~alnum
  readonly = "readonly" ~alnum

  keyword = class | def | return | for | in | if | elif | else | this | true | false | none | void | break
          | readonly | self
  
  identifier = (this ".")? ~keyword (letter | "_") (alnum | "_")*

  space += comment
  comment = "#" (~"\n" any)* "\n"

}