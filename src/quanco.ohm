Quanco {
  Program = (Statement | space)*

  Statement = ClassDef
            | FunctionDef
            | ForLoop
            | WhileLoop
            | IfStmt
            | BreakStmt
            | ReturnStmt
            | VarDecl
            | Assignment
            | ExprStmt
            
  Block = "{" Statement+ "}"
  
  ClassDef = class identifier Block

  FunctionDef = def ~__init__ identifier "(" Params? ")" ReturnType Block --funcDef
              | FunctionNoReturn
              
  FunctionNoReturn = def __init__ "(" Params? ")" Block

  Params = Param ("," Param)*
  Param = ~self identifier ":" Type ("=" Expr)? -- regParam
        | self

  ReturnType = "->" (Type | void)

  LValue = identifier ("." identifier)*

  ForLoop = for VarDecl "," ExprStmt "," ExprStmt Block --expressionOrientedLoop
          | for identifier in Expr Block                        --membershipLoop

  WhileLoop = while Expr Block

  IfStmt = if Expr Block
           (elif Expr Block)*
           (else Block)?

  BreakStmt = break

  ReturnStmt = return Expr?

  VarDecl = readonly? identifier ":" Type ("=" Expr)?

  Assignment = LValue "+=" Expr --incReassignment
             | LValue "-=" Expr --decReassignment
             | LValue "=" Expr  --tradAssignment

  ExprStmt = Expr

  Expr = OrExpr

  OrExpr = AndExpr ("or" AndExpr)*

  AndExpr = CompareExpr ("and" CompareExpr)*

  CompareExpr = AddExpr (CompareOp AddExpr)*

  AddExpr = MulExpr (AddOp MulExpr)*

  MulExpr = UnaryExpr (MulOp UnaryExpr)*

  UnaryExpr = PrefixOp* PostfixExpr PostfixOp*

  PostfixExpr = PrimaryExpr (DotOp | CallOp)*

  DotOp = "." identifier
  CallOp = "(" ArgList? ")"

  PrimaryExpr = ParenExpr
              | ListLit
              | DictLit
              | string
              | identifier
              | number
              | BooleanLit
              | none

  ParenExpr = "(" Expr ")"

  BooleanLit = true | false

  ArgList = (NamedArg | Expr) ("," (NamedArg | Expr))*

  NamedArg = identifier "=" Expr

  ListLit = "[" ListItems? "]"
  ListItems = Expr ("," Expr)*

  DictLit = "{" DictItems? "}"
  DictItems = DictItem ("," DictItem)*
  DictItem = Expr ":" Expr

  Type = UnionType
       | ListType
       | DictType
       | BasicType
       | identifier

  BasicType = "str" | "int" | "float" | "bool" | none
  ListType = "list" "[" Type "]"
  DictType = "dict" "[" Type "," Type "]"
  UnionType = Type "|" Type

  CompareOp = "==" | "!=" | "<=" | "<" | ">=" | ">"
  AddOp = "+" | "-"
  MulOp = "*" | "/"
  PrefixOp = unaryInc | unaryDec | "-" | "not"
  PostfixOp = unaryInc | unaryDec

  unaryInc = "++"
  unaryDec = "--"
  number = digit+ ("." digit+)? (("e" | "E") digit+)?
  string = "\"" (~"\"" any)* "\""
         | "'" (~"'" any)* "'"
         | "f\"" (~"\"" any)* "\""
         | "f'" (~"'" any)* "'"

  class = "class" ~alnum
  def = "def" ~alnum
  __init__ = "__init__" ~alnum
  self = "self" ~alnum
  this = "this" ~alnum
  true = "True" ~alnum
  false = "False" ~alnum
  none = "None" ~alnum
  return = "return" ~alnum
  for = "for" ~alnum
  in = "in" ~alnum
  while = "while" ~alnum
  if = "if" ~alnum
  elif = "elif" ~alnum
  else = "else" ~alnum
  void = "void" ~alnum
  break = "break" ~alnum
  readonly = "readonly" ~alnum

  keyword = class | def | return | for | in | if | elif | else | this | true | false | none | void | break
          | readonly
  
  identifier = ~keyword (letter | "_") (alnum | "_")*     --commonID
  			     | this "." identifier                        --classID

  space += comment
  comment = "#" (~"\n" any)* "\n"

}